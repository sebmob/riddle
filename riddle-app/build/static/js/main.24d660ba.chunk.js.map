{"version":3,"sources":["icons/arrow.svg","firebase/config.js","components/Clues/Clues.jsx","components/Riddle/Riddle.jsx","components/Login/Login.jsx","components/Leaderboard/LeaderBoard.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","firebase","length","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","clues","firstClue","useFirstClue","count","riddles","secondClue","useSecondClue","isSolved","className","id","onClick","Riddle","handleChange","handleSubmit","incrementCount","decrementCount","wrongAnswer","lenght","includes","question","answer","action","onSubmit","type","onChange","value","src","logo","alt","Login","handleSubmitLogin","userValidation","htmlFor","placeholder","LeaderBoard","leaderboard","sort","a","b","points","map","user","i","key","App","useState","setRiddles","userInput","setUserInput","setCount","setPoints","setIsSolved","isLogin","setisLogin","setUser","setUserValidation","setFirstClue","setSecondClue","setWrongAnswer","setLeaderboard","viewLeaderboard","setViewLeaderboard","e","target","preventDefault","reset","users","firestore","collection","get","then","querySnapshot","docs","doc","push","data","username","getSolved","getPoints","set","solved","prevState","addpoints","toLowerCase","update","FieldValue","arrayUnion","setTimeout","useEffect","onSnapshot","button","document","getElementById","undefined","innerHTML","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.24d660ba.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/arrow.7b94cf70.svg\";","import * as firebase from \"firebase\";\r\nimport \"@firebase/auth\";\r\nimport \"@firebase/firestore\";\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyCSt8mtMV6HeOAY907MerjTwI0LPQ4bQJE\",\r\n    authDomain: \"riddle-d7331.firebaseapp.com\",\r\n    databaseURL: \"https://riddle-d7331.firebaseio.com\",\r\n    projectId: \"riddle-d7331\",\r\n    storageBucket: \"riddle-d7331.appspot.com\",\r\n    messagingSenderId: \"89205362373\",\r\n    appId: \"1:89205362373:web:0d232603e933e01fc6aaac\",\r\n    measurementId: \"G-60SMYF966M\"\r\n  };\r\n\r\n  if (!firebase.apps.length) {\r\n    firebase.initializeApp(firebaseConfig);\r\n  }\r\n  export { firebase };","import React from 'react'\r\nimport './Clues.css'\r\n\r\n\r\nfunction clues({ firstClue, useFirstClue, count, riddles, secondClue, useSecondClue, isSolved }) {\r\n    return (\r\n        <div className=\"div--clue--container\">\r\n            <button id=\"firstClue\" className=\"button--clues\" onClick={firstClue ? useSecondClue : useFirstClue }>Get Clue</button>\r\n            {firstClue ? <p className=\"p--firstClue\">{riddles[count].firstClue}</p> : <p></p>}\r\n            {secondClue ? <p className=\"p--secondClue\">{riddles[count].secondClue}</p> : <p></p>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default clues\r\n","import React from 'react'\r\nimport './Riddle.css'\r\nimport logo from '../../icons/arrow.svg'\r\nimport Clues from '../Clues/Clues'\r\n\r\nfunction Riddle({ \r\n    riddles, \r\n    handleChange, \r\n    handleSubmit, \r\n    incrementCount, \r\n    count, \r\n    decrementCount, \r\n    isSolved, \r\n    firstClue, \r\n    useFirstClue, \r\n    useSecondClue, \r\n    secondClue,\r\n    wrongAnswer\r\n}) {\r\n    return (\r\n            <div className={isSolved.lenght !== 0 && isSolved.includes(riddles[count].id) ? \"div--riddle--container--solved\" : \"div--riddle--container\"}>\r\n                {riddles.length !== 0 ? \r\n                <div>\r\n                    <h3 className=\"h4--question\">{riddles[count].question}</h3>\r\n                    {wrongAnswer ? <p className=\"p--wrongAnswer\">Almost, try again!</p> : <p></p>}\r\n                {isSolved.lenght !== 0 && isSolved.includes(riddles[count].id) ? <p className=\"p--completed\">You got it! {riddles[count].answer}</p> :\r\n                    <form className=\"form--container\" action=\"input\" onSubmit={handleSubmit}>\r\n                        <input className=\"input--answer\" type=\"text\" onChange={handleChange}/>\r\n                        <input className=\"input--answer--submit\" type=\"submit\" value=\"Solve\"/>\r\n                    </form>}\r\n                    {isSolved.includes(riddles[count].id) ? <div></div> : \r\n                            <Clues \r\n                            count={count}\r\n                            riddles={riddles}\r\n                            firstClue={firstClue}\r\n                            useFirstClue={useFirstClue}\r\n                            useSecondClue={useSecondClue}\r\n                            secondClue={secondClue}\r\n                            isSolved={isSolved} />\r\n                    }\r\n            \r\n                    <div className=\"div--button--container\">\r\n                        <img className=\"img--left--arrow\" onClick={decrementCount} src={logo} alt=\"arrow-icon\"/>\r\n                        <img className=\"img--right--arrow\" onClick={incrementCount} src={logo} alt=\"arrow-icon\"/>\r\n                    </div>\r\n                </div>\r\n                : <div></div>}\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default Riddle\r\n","import React from 'react'\r\nimport './Login.css'\r\n\r\n\r\nfunction Login({ handleChange, handleSubmitLogin, userValidation }) {\r\n    return (\r\n        <div className=\"div--login--container\">\r\n            <form className=\"form--container\" action=\"input\" onSubmit={handleSubmitLogin}>\r\n                <label htmlFor=\"\">Login with your username, if you haven't played before please choose a username.</label>\r\n                <input className=\"input--login\" type=\"text\" placeholder=\"Username\" onChange={handleChange}/>\r\n                <input className=\"input--login--submit\" type=\"submit\" value=\"Login\"/>\r\n                {userValidation ? <p>Username needs to be atleast 3 characters long</p> : <p></p>}\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","import React from 'react'\r\nimport './LeaderBoard.css'\r\n\r\n\r\nfunction LeaderBoard({ leaderboard }) {\r\n    return (\r\n        <div className=\"div--table--container\">\r\n            <table className=\"table--leaderboard\">\r\n                <tbody>\r\n                    <tr>\r\n                        <th>Username</th>\r\n                        <th>Points</th>\r\n                    </tr>\r\n                        {leaderboard\r\n                        .sort((a, b) => b.points - a.points)\r\n                        .map((user, i) => {\r\n                        return  <tr key={i}>\r\n                        <td>{user.user}</td>\r\n                        <td>{user.points}</td>\r\n                    </tr>\r\n\r\n                        })}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LeaderBoard\r\n","import React, { useState, useEffect } from 'react';\nimport { firebase } from \"./firebase/config\";\nimport './App.css';\nimport Riddle from './components/Riddle/Riddle';\nimport Login from './components/Login/Login';\nimport LeaderBoard from './components/Leaderboard/LeaderBoard';\n\nfunction App() {\n\nconst [ riddles, setRiddles ] = useState('');\nconst [ userInput, setUserInput ] = useState('');\nconst [ count, setCount ] = useState(0);\nconst [ points, setPoints ] = useState(0);\nconst [ isSolved, setIsSolved ] = useState([])\nconst [ isLogin, setisLogin ] = useState(false)\nconst [ user, setUser ] = useState('')\nconst [ userValidation, setUserValidation ] = useState(false)\nconst [ firstClue, setFirstClue ] = useState(false)\nconst [ secondClue, setSecondClue ] = useState(false)\nconst [ wrongAnswer, setWrongAnswer ] = useState(false)\nconst [ leaderboard, setLeaderboard ] = useState([])\nconst [ viewLeaderboard, setViewLeaderboard ] = useState(false)\n\nconst handleChange = (e) => setUserInput(e.target.value);\n\nconst handleSubmit = (e) => {\n  e.preventDefault();\n  e.target.reset();\n  addpoints()\n}\n\nconst handleSubmitLogin = async (e) => {\n  e.preventDefault()\n  e.target.reset()\n  let users = [];\n\n  firebase.firestore().collection('users').get().then((querySnapshot) => {\n    querySnapshot.docs.map((doc) => {\n     return users.push(doc.data().username)\n    })\n    if(userInput.length < 3) {\n      setUserValidation(true)\n    } else if (users.includes(userInput)) {\n      setisLogin(true)\n      setUser(userInput)\n      getSolved()\n      getPoints()\n    } else {\n      firebase.firestore().collection('users').doc(userInput).set({ username: userInput, solved: [], points: 0 })\n      .then(() => getSolved)\n      setisLogin(true)\n      setUser(userInput)\n    }\n  })\n}\n\nconst getSolved = async () => {\n  const doc = firebase.firestore().collection('users')\n  await doc.doc(userInput).get()\n  .then((doc) => {\n    doc.data().solved.length > 0 ? doc.data().solved.map((id) => {\n      return setIsSolved((prevState => [...prevState, id])) \n    }) : setIsSolved([])\n  }) \n}\n\nconst getPoints = async () => {\n  const data = firebase.firestore().collection('users').doc(userInput)\n  await data.get().then((doc) => setPoints(doc.data().points))\n}\n\nconst incrementCount = () => {\n  const button = document.getElementById('firstClue');\n  if (count !== riddles.length - 1) {\n    setCount(count + 1)\n    setFirstClue(false)\n    setSecondClue(false)\n    if (button !== null && button !== undefined) {\n      button.innerHTML = \"Get Clue\"\n    } \n  }\n}\n\nconst decrementCount = () => {\n  const button = document.getElementById('firstClue');\n  if (count !== 0) {\n    setCount(count - 1)\n    setFirstClue(false)\n    setSecondClue(false)\n    if (button !== null && button !== undefined) {\n      button.innerHTML = \"Get Clue\"\n    } \n  }\n}\n\nconst useFirstClue = () => {\n  const button = document.getElementById('firstClue')\n  setFirstClue(true)\n  button.innerHTML = 'Get Clue' ? button.innerHTML = 'Get Second Clue' : button.innerHTML = 'Get Clue'\n}\n\nconst useSecondClue = () => {\n  setSecondClue(true)\n}\n\nconst addpoints = () => {\n  if (userInput.toLowerCase().includes(riddles[count].answer.toLowerCase()) && secondClue) {\n    setPoints(points + 1)\n    firebase.firestore().collection('users').doc(user).update({\n      points: points + 1,\n      solved: firebase.firestore.FieldValue.arrayUnion(riddles[count].id)\n    })\n    setIsSolved(prevState => [...prevState, riddles[count].id])\n  } else if (userInput.toLowerCase().includes(riddles[count].answer.toLowerCase()) && firstClue) {\n      setPoints(points + 3)\n      firebase.firestore().collection('users').doc(user).update({\n        points: points + 3,\n        solved: firebase.firestore.FieldValue.arrayUnion(riddles[count].id)\n      })\n      setIsSolved(prevState => [...prevState, riddles[count].id])\n  } else if (userInput.toLowerCase().includes(riddles[count].answer.toLowerCase())) {\n      setPoints(points + 5)\n      firebase.firestore().collection('users').doc(user).update({\n        points: points + 5,\n        solved: firebase.firestore.FieldValue.arrayUnion(riddles[count].id)\n      })\n      setIsSolved(prevState => [...prevState, riddles[count].id])\n  } else {\n      setWrongAnswer(true)\n      setTimeout(() => setWrongAnswer(false), 2500)\n\n  }\n}\n\nuseEffect(() => {\n  const data = firebase.firestore().collection('users');\n  data.onSnapshot((querySnapshot) => {\n    setLeaderboard([])\n    querySnapshot.docs.map((doc) => {\n      return setLeaderboard((prevState) => [ ...prevState, {\n        user: doc.data().username,\n        points: doc.data().points\n      }])\n    })\n  })\n  return () => {\n    \n  }\n}, [])\n\nconst getAllPoints = () => {\n  setViewLeaderboard(true)\n}\n\nconst backToRiddles = () => {\n  setViewLeaderboard(false)\n}\n\nuseEffect(() => {\n  const data = firebase.firestore().collection('riddles')\n    data.get().then((querySnapshot) => {\n      querySnapshot.docs.map((doc) => setRiddles((prevState) => [ ...prevState, {\n        id: doc.id,\n        question: doc.data().question,\n        answer: doc.data().answer,\n        firstClue: doc.data().firstClue,\n        secondClue: doc.data().secondClue\n      }\n      ]))\n    })\n  return () => {\n    \n  }\n}, [])\n\n  return (\n    <div className=\"App\">\n      <header className=\"header\">\n        <h3 className=\"h3--title\">Riddle Me This...</h3>\n        {isLogin ? <h3 className=\"h3--points\">Points: {points}</h3> : <div></div>}\n        <div className=\"div--leaderboard--container\">\n          {viewLeaderboard ? <button className=\"button--leaderboard\" onClick={backToRiddles}>Back To Riddles</button> : <div></div>}\n          {isLogin ? <button className=\"button--leaderboard\" onClick={getAllPoints}>Leaderboard</button> : <div></div>}\n        </div>\n      </header>\n\n      {viewLeaderboard ? <LeaderBoard leaderboard={leaderboard}/> : <div></div>}\n\n      {isLogin && !viewLeaderboard ? \n              <Riddle \n              riddles={riddles}\n              handleChange={handleChange}\n              handleSubmit={handleSubmit}\n              incrementCount={incrementCount}\n              decrementCount={decrementCount}\n              count={count}\n              isSolved={isSolved}\n              firstClue={firstClue}\n              useFirstClue={useFirstClue}\n              useSecondClue={useSecondClue}\n              secondClue={secondClue}\n              wrongAnswer={wrongAnswer}\n      />\n      : <div></div>}\n      {!isLogin ?               \n              <Login \n              handleChange={handleChange}\n              handleSubmitLogin={handleSubmitLogin}\n              userValidation={userValidation}/>\n               : <div></div>}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}